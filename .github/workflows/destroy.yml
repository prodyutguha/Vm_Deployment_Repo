name: Destroy VM

on:
  workflow_dispatch:
    inputs:
      vm_name:
        description: "VM Name (used for naming RG, VM, etc.)"
        required: true
      os_type:
        description: "OS Type (Windows or Linux)"
        required: true
      # vm_size:
      #   description: "VM Size"
      #   required: false
      # os_disk_size:
      #   description: "OS Disk Size (GB)"
      #   required: false
      # data_disk_size:
      #   description: "Data Disk Size (GB)"
      #   required: false

jobs:
  destroy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: terraform init -backend-config="key=${{ github.event.inputs.vm_name }}.tfstate"

      - name: Extract VM variables from state file
        id: extract
        run: |
          terraform show -json > tfstate.json

          echo "🔍 Extracting values from Terraform state..."

          VM_SIZE=$(jq -r '
            .values.root_module.resources[] 
            | select(.type == "azurerm_linux_virtual_machine") 
            | .values.size' tfstate.json)

          OS_DISK_SIZE=$(jq -r '
            .values.root_module.resources[] 
            | select(.type == "azurerm_linux_virtual_machine") 
            | .values.os_disk[0].disk_size_gb' tfstate.json)

          DATA_DISK_SIZE=$(jq -r '
            .values.root_module.resources[] 
            | select(.type == "azurerm_managed_disk") 
            | .values.disk_size_gb' tfstate.json)

          OS_TYPE=$(jq -r '
            .values.root_module.resources[] 
            | select(.type == "azurerm_linux_virtual_machine" or .type == "azurerm_windows_virtual_machine") 
            | .values.source_image_reference.sku' tfstate.json)

          echo "VM_SIZE=$VM_SIZE"
          echo "OS_DISK_SIZE=$OS_DISK_SIZE"
          echo "DATA_DISK_SIZE=$DATA_DISK_SIZE"
          echo "OS_TYPE=$OS_TYPE"

          # # Fail if any variable is missing
          # if [ -z "$VM_SIZE" ] || [ "$VM_SIZE" = "null" ]; then
          #   echo "❌ Error: vm_size not found in Terraform state"
          #   exit 1
          # fi

          # if [ -z "$OS_DISK_SIZE" ] || [ "$OS_DISK_SIZE" = "null" ]; then
          #   echo "❌ Error: os_disk_size not found in Terraform state"
          #   exit 1
          # fi

          # if [ -z "$DATA_DISK_SIZE" ] || [ "$DATA_DISK_SIZE" = "null" ]; then
          #   echo "❌ Error: data_disk_size not found in Terraform state"
          #   exit 1
          # fi

          # if [ -z "$value" ] || [ "$value" = "null" ]; then
          #   echo "❌ Error: $var is missing from state file"
          #   exit 1
          # fi

          # for var in VM_SIZE OS_DISK_SIZE DATA_DISK_SIZE OS_TYPE; do
            value=$(eval echo \$$var)
            if [ -z "$value" ] || [ "$value" = "null" ]; then
              echo "❌ Error: $var is missing from state file"
              exit 1
            fi
          done

          # Export to environment for later steps
          echo "VM_SIZE=$VM_SIZE" >> $GITHUB_ENV
          echo "OS_DISK_SIZE=$OS_DISK_SIZE" >> $GITHUB_ENV
          echo "DATA_DISK_SIZE=$DATA_DISK_SIZE" >> $GITHUB_ENV
          echo "OS_TYPE=$OS_TYPE" >> $GITHUB_ENV

      - name: Terraform Plan Destroy (Full RG)
        run: |
          terraform plan -destroy -input=false -lock=false \
            -var="vm_name=${{ github.event.inputs.vm_name }}" \
            -var="os_type=$OS_TYPE" \
            -var="vm_size=$VM_SIZE" \
            -var="os_disk_size=$OS_DISK_SIZE" \
            -var="data_disk_size=$DATA_DISK_SIZE"

      - name: Terraform Destroy (Full RG)
        run: |
          terraform destroy -auto-approve -input=false -lock=false \
            -var="vm_name=${{ github.event.inputs.vm_name }}" \
            -var="os_type=$OS_TYPE" \
            -var="vm_size=$VM_SIZE" \
            -var="os_disk_size=$OS_DISK_SIZE" \
            -var="data_disk_size=$DATA_DISK_SIZE"